<?php
/**
 * Steam Calculators
 *
 * @package    View_Scripts
 * @subpackage Equipment Calculators
 * @version    beta
 * @author     Michael B Muller
 * <mbm@analyticalenergy.com>
 * 
 */

$titles = Steam_Support::descriptions('Equipment', 'steamTurbine');
$linkLocation = 'equipTurbine';
?>
<h1><?php echo $this->translator->_($titles[0]." Calculator");?>
    <span style='position: relative; top: -3px; left: 8px; font-size: .55em; border: 1px solid black; padding: 1px; padding-left: 3px; padding-right: 3px; background-color: #ddd;'
    ><a href="tutorials?vid=turbine"><?php echo $this->translator->_("watch tutorial");?></a></span>
    <span style='position: relative; top: -3px; left: 8px; font-size: .55em; border: 1px solid black; padding: 1px; padding-left: 3px; padding-right: 3px; background-color: #ddd;'
    ><a href="SSMTGuide.pdf#page=43"><?php echo $this->translator->_("view guide");?></a></span>
</h1>
<h3><?php echo $this->translator->_($titles[1]);?></h3><BR>

<?php 
$mS = Steam_MeasurementSystem::getInstance();
$turbineForm = new Steam_Forms_Turbine();
$formValid = false;
//Load Saved Form Data
$formData = new Zend_Session_Namespace('formData');

//Populate, validate, or reset form
if (isset($_GET['reset'])) unset($formData->turbine);
$examples = Steam_DataGenerator::examples('turbine');
if (isset($_GET['random']) and isset($examples[$_GET['random']]) ) $_POST = Steam_DataGenerator::steamTurbine($_GET['random']);
if (!isset($_POST['Enter']) and isset($formData->turbine)){
    $_POST = $formData->turbine->unload();
    $_POST['Enter'] = 'Enter';
}
if (isset($_POST['Enter'])) {
    if ($formValid = $turbineForm->isValid($_POST)){
        $formData->turbine = new Steam_DTO('turbine', $turbineForm->getValues());   
    }
}
?>

<script type="text/javascript">
    $(document).ready(function() {
        $('#examplesA').hide();             
        $('#examplesB').hide();             
        $('#examplesC').hide();             
        $('#examplesHint').show();         

        $('#exampleTable').mouseover(function(){ $('#examplesA').show();$('#examplesB').show();$('#examplesC').show();$('#examplesHint').hide(); });
        $('#exampleTable').mouseout(function(){ $('#examplesA').hide();$('#examplesB').hide();$('#examplesC').hide(); $('#examplesHint').show();});
                 
        $('#turbineMethod').change(function() {    
            massFlow();
        });

        function massFlow(){     
            if ($('#turbineMethod').val() == 'massFlow'){
                $("#massFlowRow").show();
                $("#powerOutRow").hide();
            }else{
                $("#massFlowRow").hide();
                $("#powerOutRow").show();
            }   
        }

        solveFor();
        $('#solveFor').change(function() { 
            solveFor();
        });

        function solveFor(){        
            if ($('#solveFor').val() == 'isoEff'){
                $("#isoEffRow").hide();
                $("#OutletSecondRow").show();                 
            }
            if ($('#solveFor').val() == 'outlet'){
                $("#isoEffRow").show();
                $("#OutletSecondRow").hide();                 
            }             
            massFlow();                       
        }
        
        <?php echo Steam_StdForm::hintDetails(array(
                          'type' => 'massflow',
                          'fieldID' => "massFlow",
                          'title' => "Mass Flow",
                          'text' => "Mass flow of steam.",                        
                      ));  
        echo Steam_StdForm::hintDetails(array(
                          'type' => 'power',
                          'fieldID' => "powerOut",
                          'title' => "Power Generated",
                          'text' => "The electricity generated by the turbine",                          
                      ));   
        echo Steam_StdForm::hintDetails(array(
                          'type' => 'isoeff',
                          'fieldID' => "isentropicEff",
                          'title' => "Isentropic Efficiency",
                          'text' => "The energy actually removed as a percent (%) of the energy removed if the turbine were an isentropic process (entropy in equal entropy out).<br>-<span style='font-style:italic;'>-Commonly 55% to 80%</span>",                       
                      ));  
        echo Steam_StdForm::hintDetails(array(
                          'type' => 'geneff',
                          'fieldID' => "genEff",
                          'title' => "Generator Efficiency",
                          'text' => "The conversion efficiency to electricity.<br>-<span style='font-style:italic;'>-Commonly 95%</span>",                        
                      ));
        echo $turbineForm->jqueryAdd(); ?>                   
    });    
</script>

<div style="float: left;">
        <form method="POST" action="<?php echo $linkLocation; ?>">
            <table class='data'>
                <tr>
                    <th style="width: 140px; text-align: center;" colspan="2"><?php echo $this->translator->_('Solve for:');?></th>
                </tr><tr>
                    <td style="width: 140px; text-align: center;" colspan="2"><?php echo $turbineForm->solveFor->renderViewhelper();?></td>
                </tr>
                <tr><td colspan="2" style="text-align:center;"><h3><?php echo $this->translator->_('Inlet Steam');?></h3></td></tr>
                <?php echo $turbineForm->displaySteamFields('Inlet'); ?>

                <tr><td colspan="2" style="text-align:center;"><h3><?php echo $this->translator->_('Turbine Properties');?></h3></td></tr>
                <tr>
                    <th><?php echo $this->translator->_('Selected Turbine Property');?></th>
                    <td><?php echo $turbineForm->turbineMethod->renderViewhelper();?></td>
                    <?php if ($errors = $turbineForm->turbineMethod->renderErrors()) echo "<td>{$errors}</td>"; ?>
                </tr>
                <tr id="massFlowRow">
                    <th><?php echo $this->translator->_('Mass Flow');?> *</th>
                    <td><?php echo $turbineForm->massFlow->renderViewhelper()." ".$mS->label('massflow');?></td>
                    <?php if ($errors = $turbineForm->massFlow->renderErrors()) echo "<td>{$errors}</td>"; ?>
                </tr>
                <tr id="isoEffRow">
                    <th><?php echo $this->translator->_('Isentropic Efficiency');?> *</th>
                    <td><?php echo $turbineForm->isentropicEff->renderViewhelper()." <span style='font-style: italic; color: grey;'>%</span>";?></td>
                    <?php if ($errors = $turbineForm->isentropicEff->renderErrors()) echo "<td>{$errors}</td>"; ?>
                </tr>
                <tr id="genEffRow">
                    <th><?php echo $this->translator->_('Generator Efficiency');?> *</th>
                    <td><?php echo $turbineForm->genEff->renderViewhelper()." <span style='font-style: italic; color: grey;'>%</span>";?></td>
                    <?php if ($errors = $turbineForm->genEff->renderErrors()) echo "<td>{$errors}</td>"; ?>
                </tr>
                <tr id="powerOutRow">
                    <th><?php echo $this->translator->_('Power Out');?> *</th>
                    <td><?php echo $turbineForm->powerOut->renderViewhelper()." ".$mS->label('power');?></td>
                    <?php if ($errors = $turbineForm->powerOut->renderErrors()) echo "<td>{$errors}</td>"; ?>
                </tr>
                <tr><td colspan="2" style="text-align:center;"><h3><?php echo $this->translator->_('Outlet Steam');?></h3></td></tr>
                <?php echo $turbineForm->displaySteamFields('Outlet'); ?>

                <tr>
                    <td><span style="font-style:italic; color: grey;">* <?php echo $this->translator->_('Required');?></span></td><td><?php echo $turbineForm->Enter->renderViewhelper();?>
                    <?php if ($formValid) echo "<span style='font-size: 1em; margin-left: 10px;'>[<a href=\"{$linkLocation}?reset=1\">{$this->translator->_('reset')}</a>]</span>";?></td>
                </tr>
            </table>
        </form>
        <?php echo $this->partial('/index/partials/dataFieldHint.phtml'); ?>
        <?php 
        if (isset($_GET['random']) and isset($examples[$_GET['random']])) 
            echo "<span style='font-style: italic; color: darkblue;'>**".$this->translate("Example").": ".$this->translate($examples[$_GET['random']])."</span><BR><BR>"; ?>    

        <table class="data" id='exampleTable' style="position: absolute; z-index: 100;">
            <tr>
                <th rowspan="2" style="vertical-align: middle;"><?php echo $this->translate('Examples'); ?>:</th>
                <td id="examplesHint" style="color: grey; font-style: italic;"><?php echo $this->translate('Mouse Over'); ?></td>
            </tr><tr id='examplesA' style="background-color: white; z-index: 30;">
                <?php foreach($examples as $key => $label): ?>
                <td><a href="<?php echo $linkLocation;?>?random=<?php echo $key;?>"><?php echo $this->translate($label);?></a></td>
                <?php endforeach;?>
            </tr>
        </table>
        <BR><BR><BR>
        <div style="width: 280px">
            <h3 style><?php echo $this->translator->_('Calculation Details and Assumptions below');?></h3>
        </div>
    </div>

<?php if ($formValid){ 
    if ($turbineForm->getValue('solveFor') == 'outlet'){


        $turbineObject = new Steam_Equipment_Turbine(array(
            'inletSteam' => $turbineForm->getSteamObject('Inlet'),
            'outletPressure' => $mS->standardize($_POST['OutletPressure'],'pressure'),
            'isentropicEff' => $_POST['isentropicEff']/100,
            'generatorEff' => $_POST['genEff']/100,
        ));
    }
    if ($turbineForm->getValue('solveFor') == 'isoEff'){
        $inlet = $turbineForm->getSteamObject('Inlet');
        $idealOutlet = new Steam_Object(array(
            'specificEntropy' => $inlet->specificEntropy,
            'pressure' => $mS->standardize($_POST['OutletPressure'],'pressure'),
            ));
        $outlet = $turbineForm->getSteamObject('Outlet');
        $isoEff = ($inlet->specificEnthalpy-$outlet->specificEnthalpy)/($inlet->specificEnthalpy-$idealOutlet->specificEnthalpy);

        $turbineObject = new Steam_Equipment_Turbine(array(
            'inletSteam' => $inlet,
            'outletPressure' => $mS->standardize($_POST['OutletPressure'],'pressure'),
            'isentropicEff' => $isoEff,
            'generatorEff' => $_POST['genEff']/100,
        ));
    }
if ($_POST['turbineMethod']=='massFlow'){
    $turbineObject->setMassFlow($mS->standardize($_POST['massFlow'],'massflow'));
}else{
    $turbineObject->setPowerOut($mS->standardize($_POST['powerOut'],'power'));
};

?>
<div style="float: left; margin-left: 40px;">
    
    <?php if (count($turbineObject->warnings)>0){
       echo "<h1 style='color: red;'>WARNING:</h1><div style='background-color: #FDD; width: 400px; padding: 5px;'>";
       foreach($turbineObject->warnings as $warning){
           echo "<span style='color: red; font-weight: bold; width: 400px;'>- {$warning}</span><BR>";
       }
       echo "</div><br>";
    }?>

    <div style="position: relative; width: 400px; float: left;">

        <div style="position: absolute; top: 0px; left: 0px;">  
            <?php echo $this->partial('/index/partials/steam-detailsMassFlow.phtml', array(
            'steamObject' => $turbineObject->inletSteam, 'steamName' => 'Inlet Steam'));?>
        </div>  
    
        <div style="position: absolute; left: 40px;  top: 110px;">    

            <?php 
            $tmp = new Steam_Model_Renderer();
            echo $tmp->drawPipe( 0, 40, 40, 40, 'vh','Red');

            echo $tmp->drawSteamPoint(20, 40, 'Down.Right', 'Fine');
            echo $tmp->drawPipe( 120, 80, 160, 80, 'vh','Orange');
            echo $tmp->drawSteamPoint(140, 80, 'Down.Left', 'Fine');
            //echo $tmp->drawPipe( 0, 35, 50, 30, 'vh','Red');
            ?>        
            <div style="position: absolute; left: 72px; top: 105px;  height: 8px; width: 14px; border: 1px black solid;">
                <div  style="height: 8px; width: 14px;background-color: silver; opacity: .5;"></div>
            </div>
            <img src="images/equipment/SteamTurbine.gif" style="position: absolute; top: 30px; left: 0px; width: 100px; height: 100px;" alt="Steam Turbine">
        </div>
 
        <div style="position: absolute; top: 270px; left: 0px;">    
            <?php echo $this->partial('/index/partials/steam-detailsMassFlow.phtml', array(
            'steamObject' => $turbineObject->outletSteam, 'steamName' => 'Outlet Steam'));?>
        </div>  
    
        
        <div style="position: absolute; top: 135px; left: 150px;">
            <?php echo $turbineObject->displayTurbineDetails(); ?>
        </div>
    </div>    
</div>
<?php } ?>

<br style='clear: both;'><BR>

<h2><?php echo $this->translator->_('Calculation Details');?></h2>
<h3><?php echo $this->translator->_('Step 1: Determine Inlet Properties');?></h3>
<span class="equationDescriptions"><?php echo $this->translator->_('Using the Steam Property Calculator, properties are determined using Inlet Pressure '.
    'and the selected second parameter (Temperature, Specific Enthalpy, Specific Entropy, or Quality). The Specific Enthalpy is then multiplied by the Mass Flow to get the Energy Flow');?>:</span>
<?php if ($formValid){ 
    $steamObject = $turbineObject->inletSteam; 
    $secParaDets = Steam_StdForm::secondParameterDetails($turbineForm->getValue('InletSecondParameter')); ?>
<ul> 
    <li><span class="equationValues"><var><?php echo $this->translator->_('Pressure');?></var> = <?php echo $mS->displayPressureLabeled($steamObject->pressure);?></span></li>
    <li><span class="equationValues"><var><?php echo $this->translator->_($secParaDets[0]);?></var> = <?php echo $mS->$secParaDets[2]($steamObject->$secParaDets[1]);?></span></li>    
    <li><a href="<?php echo Steam_StdForm::propLink($steamObject, $turbineForm->getValue('InletSecondParameter'));?>">[<?php echo $this->translator->_('Steam Property Calculator');?>]</a> => 
    <span class="equationValues"><var><?php echo $this->translator->_('Specific Enthalpy');?></var> = <?php echo $mS->displaySpecificEnthalpyLabeled($steamObject->specificEnthalpy);?></span></li>     
</ul>    
<?php } ?>
<ul>    
    <li><var><?php echo $this->translator->_('Inlet Energy Flow');?></var> = <var><?php echo $this->translator->_('Specific Enthalpy');?></var> * <var><?php echo $this->translator->_('Mass Flow');?></var>
    <?php if ($formValid){ ?>
        <br>[ <span class="equationValues"><var><?php echo $this->translator->_('Inlet Energy Flow');?></var> = <?php echo $mS->displayEnergyflowLabeled($steamObject->energyFlow);?> 
        = <?php echo $mS->displaySpecificEnthalpyLabeled($steamObject->specificEnthalpy);?> * <?php echo $mS->displayMassflowLabeled($steamObject->massFlow);?></span> ]
    <?php } ?></li>
</ul>


<h3><?php echo $this->translator->_('Step 2: Calculate Ideal Outlet Properties (Inlet Entropy equals Outlet Entropy)');?></h3>
<?php if ($formValid){ 
    $steamObject = $turbineObject->outletSteamIDEAL; 
    $secParaDets = Steam_StdForm::secondParameterDetails('SpecificEntropy'); ?>
<ul> 
    <li><span class="equationValues"><var><?php echo $this->translator->_('Pressure');?></var> = <?php echo $mS->displayPressureLabeled($steamObject->pressure);?></span></li>
    <li><span class="equationValues"><var><?php echo $this->translator->_($secParaDets[0]);?></var> = <?php echo $mS->$secParaDets[2]($steamObject->$secParaDets[1]);?></span></li>    
    <li><a href="<?php echo Steam_StdForm::propLink($steamObject, 'SpecificEntropy');?>">[<?php echo $this->translator->_('Steam Property Calculator');?>]</a> => 
    <span class="equationValues"><var><?php echo $this->translator->_('Specific Enthalpy');?></var> = <?php echo $mS->displaySpecificEnthalpyLabeled($steamObject->specificEnthalpy);?></span></li>     
</ul>    
<?php }else{ echo "<br>"; }  ?>

<h3><?php echo $this->translator->_("Step 3: If solve for 'Isentropic Efficiency', Determine Outlet Properties");?></h3>
 
<?php if ($formValid and $turbineForm->getValue('solveFor')=='isoEff'){ 
    $steamObject = $turbineObject->outletSteam; 
    $secParaDets = Steam_StdForm::secondParameterDetails($turbineForm->getValue('InletSecondParameter')); ?>
<ul> 
    <li><span class="equationValues"><var><?php echo $this->translator->_('Pressure');?></var> = <?php echo $mS->displayPressureLabeled($steamObject->pressure);?></span></li>
    <li><span class="equationValues"><var><?php echo $this->translator->_($secParaDets[0]);?></var> = <?php echo $mS->$secParaDets[2]($steamObject->$secParaDets[1]);?></span></li>    
    <li><a href="<?php echo Steam_StdForm::propLink($steamObject, $turbineForm->getValue('InletSecondParameter'));?>">[<?php echo $this->translator->_('Steam Property Calculator');?>]</a> => 
    <span class="equationValues"><var><?php echo $this->translator->_('Specific Enthalpy');?></var> = <?php echo $mS->displaySpecificEnthalpyLabeled($steamObject->specificEnthalpy);?></span></li>     
</ul>    
<?php } ?>

<span class="equationDescriptions"><?php echo $this->translator->_('Using the outlet specific enthalpy, calculate the isentropic efficiency');?>:</span>
<ul>    
    <li><var><?php echo $this->translator->_('Isentropic Efficiency');?></var> = (<var><?php echo $this->translator->_('Inlet Specific Enthalpy');?></var> - <var><?php echo $this->translator->_('Outlet Specific Enthalpy');?></var>) / 
        (<var><?php echo $this->translator->_('Inlet Specific Enthalpy');?></var> - <var><?php echo $this->translator->_('IDEAL Outlet Specific Enthalpy');?></var>)
        <?php if ($formValid and $turbineForm->getValue('solveFor')=='isoEff'){  ?>
        <BR>[<span class="equationValues"><var><?php echo $this->translator->_('Isentropic Efficiency');?></var> = <?php echo number_format($turbineObject->isentropicEff*100,2).' '.$mS->label('%');?> = 
            (<?php echo $mS->displaySpecificEnthalpyLabeled($turbineObject->inletSteam->specificEnthalpy);?> - <?php echo $mS->displaySpecificEnthalpyLabeled($turbineObject->outletSteam->specificEnthalpy);?>) / 
            (<?php echo $mS->displaySpecificEnthalpyLabeled($turbineObject->inletSteam->specificEnthalpy);?> - <?php echo $mS->displaySpecificEnthalpyLabeled($turbineObject->outletSteamIDEAL->specificEnthalpy);?>)</span>]
        <?php } ?>
    </li>
</ul>


<h3><?php echo $this->translator->_("Step 3: If solve for 'Outlet Properties', Determine Outlet Specific Enthalpy");?></h3>
<ol>    
    <li><var><?php echo $this->translator->_('Isentropic Efficiency');?></var> = (<var><?php echo $this->translator->_('Inlet Specific Enthalpy');?></var> - <var><?php echo $this->translator->_('Outlet Specific Enthalpy');?></var>) / 
        (<var><?php echo $this->translator->_('Inlet Specific Enthalpy');?></var> - <var><?php echo $this->translator->_('IDEAL Outlet Specific Enthalpy');?></var>)</li>
    <li><var><?php echo $this->translator->_('Isentropic Efficiency');?></var> * (<var><?php echo $this->translator->_('Inlet Specific Enthalpy');?></var> - <var><?php echo $this->translator->_('IDEAL Outlet Specific Enthalpy');?></var>) = 
        (<var><?php echo $this->translator->_('Inlet Specific Enthalpy');?></var> - <var><?php echo $this->translator->_('Outlet Specific Enthalpy');?></var>) 
        </li>
        <li><var><?php echo $this->translator->_('Outlet Specific Enthalpy');?></var> = <var><?php echo $this->translator->_('Inlet Specific Enthalpy');?></var> - <var><?php echo $this->translator->_('Isentropic Efficiency');?></var> * (<var><?php echo $this->translator->_('Inlet Specific Enthalpy');?></var> - <var><?php echo $this->translator->_('IDEAL Outlet Specific Enthalpy');?></var>)
            
        <?php if ($formValid and $turbineForm->getValue('solveFor')=='outlet'){  ?>
        <BR>[<span class="equationValues"><var><?php echo $this->translator->_('Outlet Specific Enthalpy');?></var> = <?php echo $mS->displaySpecificEnthalpyLabeled($turbineObject->outletSteam->specificEnthalpy);?> =             
            <?php echo $mS->displaySpecificEnthalpyLabeled($turbineObject->inletSteam->specificEnthalpy);?> -
            <?php echo number_format($turbineObject->isentropicEff*100,2).' '.$mS->label('%');?> * 
            (<?php echo $mS->displaySpecificEnthalpyLabeled($turbineObject->inletSteam->specificEnthalpy);?> - <?php echo $mS->displaySpecificEnthalpyLabeled($turbineObject->outletSteamIDEAL->specificEnthalpy);?>)</span>]
             
        <?php } ?>
    </li>
</ol>

<span class="equationDescriptions"><?php echo $this->translator->_('Using the outlet specific enthalpy, calculate the outlet properties');?>:</span>
    <?php if ($formValid and $turbineForm->getValue('solveFor')=='outlet'){ 
    $steamObject = $turbineObject->outletSteam; 
    $secParaDets = Steam_StdForm::secondParameterDetails('SpecificEnthalpy'); ?>
<ul> 
    <li><span class="equationValues"><var><?php echo $this->translator->_('Pressure');?></var> = <?php echo $mS->displayPressureLabeled($steamObject->pressure);?></span></li>
    <li><span class="equationValues"><var><?php echo $this->translator->_($secParaDets[0]);?></var> = <?php echo $mS->$secParaDets[2]($steamObject->$secParaDets[1]);?></span></li>    
    <li><a href="<?php echo Steam_StdForm::propLink($steamObject, 'SpecificEnthalpy');?>">[<?php echo $this->translator->_('Steam Property Calculator');?>]</a> => 
    <span class="equationValues"><var><?php echo $this->translator->_('Temperature');?></var> = <?php echo $mS->displayTemperatureLabeled($steamObject->temperature);?></span></li>     
</ul>    
<?php }else{ echo "<br>"; } ?>


<h3><?php echo $this->translator->_('Step 4: Calculate Steam Turbine Energy Out and Generation (Power Out)');?></h3>

<ul>    
    <li><var><?php echo $this->translator->_('Energy Out');?></var> = (<var><?php echo $this->translator->_('Inlet Specific Enthalpy');?></var> - <var><?php echo $this->translator->_('Outlet Specific Enthalpy');?></var>) * <var><?php echo $this->translator->_('Mass Flow');?></var>        
        <?php if ($formValid){ ?>
        <BR>[<span class="equationValues"><var><?php echo $this->translator->_('Energy Out');?></var> = <?php echo $mS->displayEnergyflowLabeled($turbineObject->energyOut);?> = (<?php echo $mS->displaySpecificEnthalpyLabeled($turbineObject->inletSteam->specificEnthalpy);?> -
            <?php echo $mS->displaySpecificEnthalpyLabeled($turbineObject->outletSteam->specificEnthalpy);?>) *
            <?php echo $mS->displayMassflowLabeled($turbineObject->inletSteam->massFlow);?></span>]
             
        <?php } ?>
    </li>
</ul>


<ul>    
    <li><var><?php echo $this->translator->_('Power Out');?></var> = <var><?php echo $this->translator->_('Energy Out');?></var> * <var><?php echo $this->translator->_('Generator Efficiency');?></var>
        <?php if ($formValid){ ?>
        <BR>[<span class="equationValues"><var><?php echo $this->translator->_('Power Out');?></var> = <?php echo $mS->displayPowerLabeled($turbineObject->powerOut);?> = <?php echo $mS->displayEnergyflowLabeled($turbineObject->energyOut);?> *
            <?php echo number_format($turbineObject->generatorEff*100,2).' '.$mS->label('%');?></span>]
             
        <?php } ?>
    </li>
</ul>
     
<h2><?php echo $this->translator->_('Assumptions');?></h2>
<ul>
    <li><?php echo $this->translator->_('Inlet Mass Flows equal Outlet Mass Flow.');?></li>
</ul>   
