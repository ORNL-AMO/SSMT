<?php
/**
 * Steam Calculators
 * 
 * @package    Steam
 * @subpackage Steam_Equipment
 * @version    beta
 * @author     Michael B Muller
 * <mbm@analyticalenergy.com>
 */

/**
 * Models Steam Turbine
 * 
 * @package    Steam
 * @subpackage Steam_Equipment
 */
class Steam_Equipment_Turbine {

    /**
     * Inlet Steam Properties
     * @var Steam_Object
     */
    var $inletSteam;
    /**
     * Isentropic Efficiency
     * @var flaot
     */
    var $isentropicEff;
    /**
     * Outlet Pressure MPa
     * @var float
     */
    var $outletPressure;    
    /**
     * IDEAL Outlet Steam Properties
     * @var Steam_Object
     */
    var $outletSteamIDEAL;
    /**
     * Outlet Steam Properties
     * @var Steam_Object
     */
    var $outletSteam;
    /**
     * Power Generated by Turbine
     * @var float
     */
    var $powerOut;
    /**
     * Energy Removed from Steam
     * @var float
     */
    var $energyOut;
    /**
     * Mass Flow of steam through turbine
     * @var type 
     */
    var $massFlow;
    /**
     * Ratio of Energy Flow to Mass Flow 
     * @var float
     */
    var $energyFlowPerMassOut;
    /**
     * Generator Efficiency %
     * @var float
     */
    var $generatorEff = 1;    
    /**
     * List of any warnings
     * @var array()
     */
    var $warnings = array();        
    /**
     * Minimum Mass Flow
     * @var float
     */
    var $minFlow;
    /**
     * Maximum Mass Flow
     * @var float
     */
    var $maxFlow;        

    /**
     * Creates a steam turbine object using the 
     *
     * @param array $properties includes:
     *      inletSteam
     *      isentropicEff
     *      outletPressure
     *      [optional] generatorEff
     */
    function __construct($properties) {
        $this->minFlow = 0;
        $this->maxFlow = 0;
        $this->inletSteam = $properties['inletSteam'];
        $this->isentropicEff = $properties['isentropicEff'];
        $this->outletPressure = $properties['outletPressure'];
        if (isset($properties['generatorEff'])) $this->generatorEff = $properties['generatorEff'];
        $this->setInletSteam($this->inletSteam);        
    }
    
    /**
     * Set Inlet Steam and determine outlet conditions
     * @param type $inletSteam
     */
    function setInletSteam($inletSteam){
        $this->inletSteam = $inletSteam;
        $this->inletSteam->setMassFlow(1);
        $this->outletSteamIDEAL = new Steam_Object(array(
            'pressure' => $this->outletPressure,
            'specificEntropy' => $this->inletSteam->specificEntropy,
        ));

        $maxEnthalpyDrop = $this->inletSteam->specificEnthalpy - $this->outletSteamIDEAL->specificEnthalpy;
        $outletEnthalpy = $this->inletSteam->specificEnthalpy - ($maxEnthalpyDrop * $this->isentropicEff);

        $this->outletSteam = new Steam_Object(array(
            'pressure' => $this->outletPressure,
            'specificEnthalpy' => $outletEnthalpy,
            'massFlow' => $this->inletSteam->massFlow,
        ));
                
        $this->energyFlowPerMassOut = $this->inletSteam->energyFlow - $this->outletSteam->energyFlow;
        $this->setMassFlow(0);
    }

    /**
     * Set Steam Turbine Mass Flow
     * @param flow $massFlow
     */
    function setMassFlow($massFlow){
        $this->massFlow = $massFlow;
        $this->energyOut = $this->massFlow * $this->energyFlowPerMassOut;
        $this->powerOut = $this->energyOut * $this->generatorEff;

        $this->inletSteam->setMassFlow($this->massFlow);
        $this->outletSteam->setMassFlow($this->massFlow);
        $this->checkWarnings();
    }

    /**
     * Set Power Out and determine/set required massflow
     * @param type $powerOut
     */
    function setPowerOut($powerOut){
        $this->powerOut = $powerOut;
        $this->energyOut = $this->powerOut / ($this->generatorEff);
        $this->massFlow = $this->energyOut / $this->energyFlowPerMassOut;
        
        $this->inletSteam->setMassFlow($this->massFlow);
        $this->outletSteam->setMassFlow($this->massFlow);
        $this->checkWarnings();
    }

    /**
     * Set Flow Range kg/hr
     * @param float $minFlow
     * @param float $maxFlow
     */
    function setFlowRange($minFlow, $maxFlow){
        $this->minFlow = $minFlow;
        $this->maxFlow = $maxFlow;
    }

    /**
     * Set Flow Range kg/hr using Power Range 
     * @param float $minPower
     * @param float $maxPower
     */
    function setPowerRange($minPower, $maxPower){
        $this->minFlow = $minPower / $this->energyFlowPerMassOut / ($this->generatorEff);
        $this->maxFlow = $maxPower / $this->energyFlowPerMassOut / ($this->generatorEff);
    }
    
    /**
     * Check Boiler Model for Warnings
     * @return int Warning Count
     */
    function checkWarnings(){        
        $this->warnings = array();
        if ($this->inletSteam->massFlow>MINIMUM_ERROR){
            if ($this->inletSteam->phase<>'Gas' and $this->inletSteam->quality<>1){
                $this->warnings[] = "Inlet Steam Contains Condensate";
            }
            if ($this->outletSteam->phase<>'Gas' and $this->outletSteam->quality<>1){
                $this->warnings[] = "Steam Condensing in Turbine";
            }
            if ($this->inletSteam->pressure<$this->outletSteam->pressure){
                $this->warnings[] = "Outlet Steam Pressure Higher Than Inlet";
            }
        }
        if ($this->inletSteam->massFlow<-MINIMUM_ERROR){
            $this->warnings[] = "Steam Flow Negative";
        }
        return count($this->warnings);
    }
    
    /**
     * Returns Table of Key Turbine Details
     * @return string
     */
    public function displayTurbineDetails(){
        $mS = Steam_MeasurementSystem::getInstance();
        $translator = Zend_Registry::get('Zend_Translate');
        $details = "<table class='data'>
             <tr><th>".$translator->_('Isentropic Efficiency')."</th><td>".number_format(100*$this->isentropicEff,1)." ".$mS->label('%')."</td></tr>
             <tr><th>".$translator->_('Energy Out')."</th><td>".$mS->displayEnergyflowLabeled($this->energyOut)."</td></tr>
             <tr><th>".$translator->_('Generator Efficiency')."</th><td>".number_format(100*$this->generatorEff,1)." ".$mS->label('%')."</td></tr>
             <tr><th>".$translator->_('Power Out')."</th><td>".$mS->displayPowerLabeled($this->powerOut)."</td></tr>
        </table>";
        return $details;
    }

    /**
     * Generates a table of all Steam Turbine properties
     * @param string $tableName
     * @return string HTML of Boiler Properties 
     */
    public function displayTurbine($tableName = Null){       
        $display = Steam_Support::displayWarnings($this);
        
        $steamDisplay = new Steam_ObjectDisplay(array(
            array($this->inletSteam, 'Inlet'),
            array($this->outletSteamIDEAL, 'Outlet Ideal'),
            array($this->outletSteam, 'Outlet'),
            ));
        $display .= $steamDisplay->displaySteamObjectTable($tableName, true);
        $display .= $this->displayTurbineDetails();

        $display .=  "<table><tr><td>
            <form action='equipTurbine' method='Post'>
            <input type='hidden' name='solveFor' value='outlet'>
            <input type='hidden' name='InletPressure' value='".round($steamDisplay->mS->localize($this->inletSteam->pressure,'pressure'),2)."'>
            <input type='hidden' name='InletSecondParameter' value='SpecificEnthalpy'>
            <input type='hidden' name='InletSpecificEnthalpy' value='".round($steamDisplay->mS->localize($this->inletSteam->specificEnthalpy,'specificEnthalpy'),2)."'>         
            <input type='hidden' name='turbineMethod' value='massFlow'>
            <input type='hidden' name='massFlow' value='".round($steamDisplay->mS->localize($this->outletSteam->massFlow,'massflow'),2)."'>
            <input type='hidden' name='isentropicEff' value='".round($this->isentropicEff*100,2)."'>
            <input type='hidden' name='genEff' value='100'>
            <input type='hidden' name='OutletPressure' value='".round($steamDisplay->mS->localize($this->outletSteam->pressure,'pressure'),3)."'>
            <input type='hidden' name='OutletSecondParameter' value='SpecificEnthalpy'>
            <input type='hidden' name='OutletSpecificEnthalpy' value='".round($steamDisplay->mS->localize($this->outletSteam->specificEnthalpy,'specificEnthalpy'),2)."'>                  
            <input type='submit' name='Enter' value='".$steamDisplay->translator->_('Copy to Steam Turbine Calculator')."'>
            </form>
            </form>
            </td><td style='color: red; padding-left: 10px;'>
            ".$steamDisplay->translator->_('*May include slight rounding errors.')."
            </td></tr></table>";
     
        return $display;
    }
}
