<?php
/**
 * Steam Calculators
 * 
 * @package    Steam
 * @subpackage Steam_Download
 * @version    beta
 * @author     Michael B Muller
 * <mbm@analyticalenergy.com>
 */

/**
 * Generate Excel Spreadsheet for Download
 * @package    Steam
 * @subpackage Steam_Download
 */
class Steam_Download_Model{
    
    /**
     * Steam_Model_Ccmmunicator
     * @var Steam_Model_Ccmmunicator
     */
    var $sMc;
    /**
     * Base Model Object
     * @var Steam_Model_Constructor $steamModel 
     */
    var $steamModel;
    /**
     * Adjusted Model Objectx
     * @var Steam_Model_Constructor $steamModel 
     */
    var $adjustedModel;
    /**
     *
     * @var Steam_DTO
     */
    var $steamDTO;
    
    /**
     * PHPExcel Object
     * @var PHPExcel
     */
    var $objPHPExcel;
    
    /**
     * Steam MeasurementSystem Object
     * @var Steam_MeasurementSystem
     */
    var $mS;
    /**
     * Zend_Translate
     * @var Zend_Translate
     */
    public $translator;
    /**
     * Currency Symbol
     * @var String
     */
    public $currencySymbol;
    
    /**
     * Construct Excel Model File
     * @global String $CURRENCY_SYMBOL
     */
    public function __construct() {
        $this->mS = new Steam_MeasurementSystem();
        $this->translator = Zend_Registry::get('Zend_Translate');
        $this->sMc = new Steam_Model_Communicator();
        $this->steamModel = $this->sMc->baseModel;
        $this->steamDTO = $this->sMc->baseDTO;
        $this->adjustedModel = $this->sMc->adjustedModels;
        
        $this->translator = Zend_Registry::get('Zend_Translate');
        $this->mS = $this->mS; 
        global $CURRENCY_SYMBOL;
        $this->currencySymbol = $CURRENCY_SYMBOL;
        
        require_once APPLICATION_PATH . '/../library/PhpExcel/PHPExcel.php';

        // Create new PHPExcel object
        $this->objPHPExcel = new PHPExcel();
        
        // Set properties
        $this->objPHPExcel->getProperties()->setCreator("DOE-AMO Steam Calculators")
                                    ->setLastModifiedBy("DOE-AMO Steam Calculators")
                                    ->setTitle("Steam System Model")
                                    ->setSubject("Steam System Model")
                                    ->setDescription("Steam System Model Details")
                                    ->setKeywords("steam properties calculator model")
                                    ->setCategory("Steam");
        
        $this->addOverview();          
        $this->addBaseModel();      
        $this->addAdjustedModel();
        $this->addComparison();
        $this->addSteamBalance();
        $this->addUploadPage();
        
        $activeSheet = $this->objPHPExcel->setActiveSheetIndex(0);
        $activeSheet->getStyle('A100:A100');
        
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="SteamSystemModel.xls"');
        header('Cache-Control: max-age=0');

        $objWriter = PHPExcel_IOFactory::createWriter($this->objPHPExcel, 'Excel5');
        $objWriter->save('php://output');
        exit;
        
    }
    
    /**
     * Add Overview Spreadsheet
     */
    private function addOverview(){        
        $activeSheet = $this->objPHPExcel->setActiveSheetIndex(0);
        $activeSheet->setTitle($this->translator->_('Overview'));
     
        $linePointer = 1;

        $activeSheet->setCellValue('B2',$this->translator->_('Steam System Modeler Tool'));
        $activeSheet->setCellValue('B3',$this->translator->_('Steam System Model'));
        $activeSheet->setCellValue('B4',$this->translator->_('link to website'));

        $activeSheet->setCellValue('B6',$this->translator->_('Generated by the:'));
        $activeSheet->setCellValue('B7',$this->translator->_('Deparment of Energy:'));
        $activeSheet->setCellValue('B8',$this->translator->_('Advanced Manufacturing Office'));
        $activeSheet->setCellValue('B9',$this->translator->_('Steam Tool System Modeler')); 
        $activeSheet->setCellValue('B10',date('m-d-Y'));

        $activeSheet->setCellValue('B12',$this->translator->_('This is a snap shot of a steam system model generated with the online steam tool. Updating individual fields WILL NOT update other fields, spreadsheets, or the overall model.'));
        $activeSheet->setCellValue('B13',$this->translator->_("This model can be reloaded to the online Steam System Modeler by following the instructions on the 'Upload Data' spreadsheet."));
        $activeSheet->getStyle('B12:B12')->getFont()                    
                ->setBold('true')
                ->getColor()->setARGB('FFFF2222');
        $activeSheet->getStyle('B13:B13')->getFont()
                ->getColor()->setARGB('FF0000FF');
        $activeSheet->getStyle('B12:B13')->getAlignment()->setWrapText(true);

        $activeSheet->getRowDimension(12)->setRowHeight(-1);
        $activeSheet->getRowDimension(13)->setRowHeight(30);
            
        $activeSheet->getColumnDimension('A')->setWidth(2);
        $activeSheet->getColumnDimension('B')->setWidth(60);

        $activeSheet->getStyle('B2:B2')->getFont() 
                ->getColor()->setARGB('FF1F497D');


        $activeSheet->getCell('B4')->getHyperlink()->setUrl('http://'.$_SERVER['HTTP_HOST'].'/');
        $activeSheet->getStyle('B3:B3')->getFont()
                ->setBold('true')
                ->setSize(24)
                ->getColor()->setARGB('FF1F497D');
        $activeSheet->getStyle('B4:B4')->getFont()
                ->setBold('true')
                ->setUnderline(PHPExcel_Style_Font::UNDERLINE_SINGLE)
                ->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKBLUE);

        $activeSheet->getStyle('B6:B6')->getFont()
                ->setSize(9)
                ->setItalic(true)
                ->getColor()->setARGB('FF555555');

        $activeSheet->getStyle('B9:B9')->getFont()
                ->setBold('true');                                        
    }
       
    /**
     * Add Base Model Spreadsheet
     */
    private function addBaseModel(){
        
        $objWorkSheet = $this->objPHPExcel->createSheet();
        $objWorkSheet->getColumnDimension('A')->setWidth(2);
        $objWorkSheet->setTitle($this->translator->_('Base Model'));       
        
        $objWorkSheet->setCellValue('B1',$this->translator->_('Base Model'));   
        $objWorkSheet->getStyle('B1:B1')->getFont()
                ->setBold('true')
                ->setSize(15)
                ->getColor()->setARGB('FF1F497D');
            
        //Boiler
        $linePointer = 2;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Boiler Details'));             
            $objWorkSheet->getStyle('B'.$linePointer.':B'.$linePointer)->getFont()
                    ->setBold('true')
                    ->setSize(12)
                    ->getColor()->setARGB('FF1F497D');
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Boiler Combustion Efficiency'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->boilerEff/100);
        $objWorkSheet->getStyle('C'.$linePointer.':C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Fuel Type'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->translator->_(Steam_Fuel::fuelNames($this->adjustedModel->fuelType) ));    
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Blowdown Rate'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->blowdownRate/100);
        $objWorkSheet->getStyle('C'.$linePointer.':C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Blowdown flashed?'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->blowdownFlashLP);                
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Steam Temperature'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawTemperature($this->steamModel->boilerTemp) );        
        $objWorkSheet->getStyle('C'.$linePointer.':C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('temperature'));
        $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('temperature'));
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Deaerator Vent Rate'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->daVentRate/100);
        $objWorkSheet->getStyle('C'.$linePointer.':C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Deaerator Pressure'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawPressure($this->steamModel->daPressure) );
        $objWorkSheet->getStyle('C'.$linePointer.':C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('pressure'));
        $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('pressure'));
        $linePointer++;        
        
        $objWorkSheet->getStyle('B3:B9')->getFont()
                ->setBold('true');        
        $objWorkSheet->getStyle('B3:B9')->getFill()
            ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
            ->getStartColor()->setARGB('FFDDEEDD');
        $objWorkSheet->getStyle('D3:D9')->getFont()
                ->setItalic('true')
            ->getColor()->setARGB('FF888888');            
            
        //General
        $linePointer = 11;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('General Details'));
        $objWorkSheet->getStyle('B'.$linePointer.':B'.$linePointer)->getFont()
                ->setBold('true')
                ->setSize(12)
                ->getColor()->setARGB('FF1F497D');
        $linePointer++;
        $objWorkSheet->getStyle( 'B'.$linePointer.':B'.($linePointer+5) )->getFont()
            ->setBold('true');        
        $objWorkSheet->getStyle('B'.$linePointer.':B'.($linePointer+5) )->getFill()
            ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
            ->getStartColor()->setARGB('FFDDEEDD');
        $objWorkSheet->getStyle('D'.$linePointer.':D'.($linePointer+5))->getFont()
            ->setItalic('true')
            ->getColor()->setARGB('FF888888');            
        
        $objWorkSheet->setCellValue('B'.($linePointer),$this->translator->_('Site Power Import'));
        $objWorkSheet->setCellValue('B'.($linePointer+1),$this->translator->_('Electricity Unit Cost'));
        $objWorkSheet->setCellValue('B'.($linePointer+2),$this->translator->_('Yearly Operating Hours'));
        $objWorkSheet->setCellValue('B'.($linePointer+3),$this->translator->_('Make-Up Unit Water Cost'));
        $objWorkSheet->setCellValue('B'.($linePointer+4),$this->translator->_('Make-Up Water Temperature'));
        $objWorkSheet->setCellValue('B'.($linePointer+5),$this->translator->_('Fuel Unit Cost'));
        
        
        $objWorkSheet->setCellValue('C'.($linePointer),$this->mS->rawPower($this->steamModel->sitePowerImport) );        
        $objWorkSheet->setCellValue('C'.($linePointer+1),$this->mS->localize($this->steamModel->sitePowerCost,'unitcost.electricity'));  
        $objWorkSheet->setCellValue('C'.($linePointer+2),$this->steamModel->operatingHours );  
        $objWorkSheet->setCellValue('C'.($linePointer+3),$this->mS->localize($this->steamModel->makeupWaterCost,'unitcost.energy'));  
        $objWorkSheet->setCellValue('C'.($linePointer+4),$this->mS->rawTemperature($this->steamModel->makeupWaterTemp) );  
        $objWorkSheet->setCellValue('C'.($linePointer+5),$this->mS->localize($this->steamModel->fuelUnitCost,'unitcost.volume'));  
                
        $objWorkSheet->getStyle('C'.($linePointer).':C'.($linePointer+5))->getNumberFormat()->setFormatCode($this->mS->excelFormat());    
        $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode($this->mS->excelFormat('power'));  
        $objWorkSheet->getStyle('C'.($linePointer+4))->getNumberFormat()->setFormatCode($this->mS->excelFormat('temperature'));  
        
        $objWorkSheet->getStyle('C'.($linePointer+1))->getNumberFormat()->setFormatCode($this->currencySymbol.' #,##0.000');
        $objWorkSheet->getStyle('C'.($linePointer+3))->getNumberFormat()->setFormatCode($this->currencySymbol.' #,##0.0000');
        $objWorkSheet->getStyle('C'.($linePointer+5))->getNumberFormat()->setFormatCode($this->currencySymbol.' #,##0.000');  
        
        $objWorkSheet->setCellValue('D'.($linePointer),$this->mS->excelUnits('power'));
        $objWorkSheet->setCellValue('D'.($linePointer+1),' / '.$this->mS->excelUnits('electricity'));
        $objWorkSheet->setCellValue('D'.($linePointer+2),'hrs');
        $objWorkSheet->setCellValue('D'.($linePointer+3),' / '.$this->mS->excelUnits('volume'));
        $objWorkSheet->setCellValue('D'.($linePointer+4),$this->mS->excelUnits('temperature'));
        $objWorkSheet->setCellValue('D'.($linePointer+5),' / '.$this->mS->excelUnits('energy'));
                                       
        //Headers
        $linePointer = 19;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Header Details'));                    
        $objWorkSheet->getStyle('B'.$linePointer.':B'.$linePointer)->getFont()
                ->setBold('true')
                ->setSize(12)
                ->getColor()->setARGB('FF1F497D');
              $linePointer++;
              $linePointerStart = $linePointer;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('HEADERS'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->translator->_('HP'));
        $lastRow = 'C';
        $unitRow = 'D';
        if ( $this->steamModel->headerCount==3 ){
            $objWorkSheet->setCellValue('D'.$linePointer,$this->translator->_('MP'));
            $objWorkSheet->setCellValue('E'.$linePointer,$this->translator->_('LP'));                       
            $lastRow = 'E';
            $unitRow = 'F';
        }
        if ( $this->steamModel->headerCount==2 ){
            $objWorkSheet->setCellValue('D'.$linePointer,$this->translator->_('LP'));
            $lastRow = 'D';
            $unitRow = 'E';
        }
        $linePointer++;
            
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Pressure'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawPressure($this->steamModel->highPressure) );
        if ( $this->steamModel->headerCount==3 ){
            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->rawPressure($this->steamModel->mediumPressure) );
            $objWorkSheet->setCellValue('E'.$linePointer,$this->mS->rawPressure($this->steamModel->lowPressure) );        
        }
        if ( $this->steamModel->headerCount==2 ){
            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->rawPressure($this->steamModel->lowPressure) );        
        }
        $objWorkSheet->getStyle('C'.$linePointer.':'.$lastRow.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('pressure'));
        $objWorkSheet->setCellValue($unitRow.$linePointer,$this->mS->excelUnits('pressure'));
        $linePointer++;
        
        
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Steam Usage'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawMassflow($this->steamModel->hpSteamUsage) );        
        if ( $this->steamModel->headerCount==3 ){
            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->rawMassflow($this->steamModel->mpSteamUsage) );
            $objWorkSheet->setCellValue('E'.$linePointer,$this->mS->rawMassflow($this->steamModel->lpSteamUsage) );
        }
        if ( $this->steamModel->headerCount==2 ){
            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->rawMassflow($this->steamModel->lpSteamUsage) );        
        }        
        $objWorkSheet->getStyle('C'.$linePointer.':'.$lastRow.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));
        $objWorkSheet->setCellValue($unitRow.$linePointer,$this->mS->excelUnits('massflow'));
        $linePointer++;
        
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Condensate Recovery'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->hpCondReturnRate/100);       
        if ( $this->steamModel->headerCount==3 ){
            $objWorkSheet->setCellValue('D'.$linePointer,$this->steamModel->mpCondReturnRate/100);
            $objWorkSheet->setCellValue('E'.$linePointer,$this->steamModel->lpCondReturnRate/100);   
        }
        if ( $this->steamModel->headerCount==2 ){
            $objWorkSheet->setCellValue('D'.$linePointer,$this->steamModel->lpCondReturnRate/100);         
        }            
        $objWorkSheet->getStyle('C'.$linePointer.':'.$lastRow.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');
        $linePointer++;
                
        if ( $this->steamModel->headerCount==3 ){            
            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Flash Condensate to Lower Header'));        
            $objWorkSheet->setCellValue('D'.$linePointer,$this->translator->_($this->steamModel->hpCondFlash));
            $objWorkSheet->setCellValue('E'.$linePointer,$this->translator->_($this->steamModel->mpCondFlash));
            $linePointer++;
        }
        if ( $this->steamModel->headerCount==2 ){                        
            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Flash Condensate to Lower Header'));                    
            $objWorkSheet->setCellValue('D'.$linePointer,$this->translator->_($this->steamModel->mpCondFlash));
            $linePointer++;
        }   
        
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Condensate Return Temp'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawTemperature($this->steamModel->condReturnTemp) );
        $objWorkSheet->getStyle('C'.$linePointer.':'.$lastRow.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('temperature'));
        $objWorkSheet->setCellValue($unitRow.$linePointer,$this->mS->excelUnits('temperature'));
        $linePointer++;   
        
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Flash Condensate Return'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->translator->_($this->steamModel->condReturnFlash) );
        $linePointer++;              
        
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Heat Loss'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->hpHeatLossPercent/100);     
        if ( $this->steamModel->headerCount==3 ){
            $objWorkSheet->setCellValue('D'.$linePointer,$this->steamModel->mpHeatLossPercent/100);
            $objWorkSheet->setCellValue('E'.$linePointer,$this->steamModel->lpHeatLossPercent/100);  
        }
        if ( $this->steamModel->headerCount==2 ){
            $objWorkSheet->setCellValue('D'.$linePointer,$this->steamModel->lpHeatLossPercent/100);        
        }            
        $objWorkSheet->getStyle('C'.$linePointer.':'.$lastRow.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');
                
        $objWorkSheet->getStyle('B'.$linePointerStart.':'.$lastRow.$linePointerStart)->getFont()
                ->setBold('true');        
        $objWorkSheet->getStyle('B'.$linePointerStart.':'.$lastRow.$linePointerStart)->getFill()
            ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
            ->getStartColor()->setARGB('FFDDEEDD');
        $objWorkSheet->getStyle('B'.$linePointerStart.':B'.$linePointer)->getFont()
                ->setBold('true');        
        $objWorkSheet->getStyle('B'.$linePointerStart.':B'.$linePointer)->getFill()
            ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)
            ->getStartColor()->setARGB('FFDDEEDD');
        
        $objWorkSheet->getStyle($unitRow.$linePointerStart.':'.$unitRow.$linePointer)->getFont()
                ->setItalic('true')
            ->getColor()->setARGB('FF888888');
        
        $objWorkSheet->getColumnDimension('B')->setWidth(35);
        $objWorkSheet->getStyle('A100:A100')->getFont();
        
        $linePointer+=2;            
        if ( $this->steamModel->headerCount==3 ){            
            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Desuperheat Steam into MP'));
            $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->desuperHeatHpMp);
            if ($this->steamModel->desuperHeatHpMp=='Yes'){
                $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->rawTemperature($this->steamModel->desuperHeatHpMpTemp) );
                $objWorkSheet->setCellValue('E'.$linePointer,$this->mS->excelUnits('temperature'));
            }
            $linePointer++;
            
            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Desuperheat Steam into LP'));
            $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->desuperHeatMpLp);
            if ($this->steamModel->desuperHeatMpLp=='Yes'){                
                $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->rawTemperature($this->steamModel->desuperHeatMpLpTemp) );
                $objWorkSheet->setCellValue('E'.$linePointer,$this->mS->excelUnits('temperature'));
            }
            
            $objWorkSheet->getStyle('D'.($linePointer-1).':D'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('temperature'));
            
            $objWorkSheet->getStyle('B'.($linePointer-1).':B'.$linePointer)->getFont()
                    ->setBold('true');        
            $objWorkSheet->getStyle('B'.($linePointer-1).':B'.$linePointer)->getFill()
                ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
                ->getStartColor()->setARGB('FFDDEEDD');
            $objWorkSheet->getStyle('E'.($linePointer-1).':E'.$linePointer)->getFont()
                    ->setItalic('true')
                ->getColor()->setARGB('FF888888');
            $linePointer+=2; 
        }
        if ( $this->steamModel->headerCount==2 ){            
            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Desuperheat Temp into LP'));
            $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->desuperHeatMpLp);
            if ($this->steamModel->desuperHeatMpLp=='Yes'){                
                $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->rawTemperature($this->steamModel->desuperHeatMpLpTemp) );
                $objWorkSheet->setCellValue('E'.$linePointer,$this->mS->excelUnits('temperature'));
            }
            
            $objWorkSheet->getStyle('D'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('temperature'));
            
            $objWorkSheet->getStyle('B'.$linePointer)->getFont()
                    ->setBold('true');        
            $objWorkSheet->getStyle('B'.$linePointer)->getFill()
                ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
                ->getStartColor()->setARGB('FFDDEEDD');
            $objWorkSheet->getStyle('E'.$linePointer)->getFont()
                    ->setItalic('true')
                ->getColor()->setARGB('FF888888');
            $linePointer+=2; 
        }    
        
        //Steam Turbines
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Steam Turbine Details')); 
        $objWorkSheet->getStyle('B'.$linePointer.':B'.$linePointer)->getFont()
                ->setBold('true')
                ->setSize(12)
                ->getColor()->setARGB('FF1F497D');
                    
        $turbines = array(
            'Cond' => 'Condensing Turbine',
            'HpLp' => 'HP to LP Turbine',
            'HpMp' => 'HP to MP Turbine',
            'MpLp' => 'MP to LP Turbine',
        );
        if ($this->steamModel->headerCount<3){
            unset($turbines['HpMp']);
            unset($turbines['MpLp']);
        }
        if ($this->steamModel->headerCount==1){
            unset($turbines['HpLp']);
        }

        $turbineMethods = array(
            'balanceHeader' => 'Balance Header',
            'fixedFlow' => 'Steam Flow',
            'flowRange' => 'Flow Range',
            'fixedPower' => 'Power Generation',
            'powerRange' => 'Power Range',
            );
        $onOff = array(1 => 'On', 0=> 'Off');
        
        foreach($turbines as $turbine => $turbineName){ 
            $turbineOn = "turbine{$turbine}On";
            $turbineIsoEff = "turbine{$turbine}IsoEff";
            $turbineGenEff = "turbine{$turbine}GenEff";
            $turbineMethod = "turbine{$turbine}Method";
            $turbineFixedFlow = "turbine{$turbine}FixedFlow";
            $turbineMinFlow = "turbine{$turbine}MinFlow";
            $turbineMaxFlow = "turbine{$turbine}MaxFlow";
            $turbineFixedPower = "turbine{$turbine}FixedPower";
            $turbineMinPower = "turbine{$turbine}MinPower";
            $turbineMaxPower = "turbine{$turbine}MaxPower";

            $linePointer++;                
            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_($turbineName)); 
            $objWorkSheet->setCellValue('C'.$linePointer,$this->translator->_($onOff[$this->steamModel->$turbineOn]));
                                                        
            $objWorkSheet->getStyle('D'.($linePointer).':D'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('temperature'));

            $objWorkSheet->getStyle('B'.($linePointer).':C'.($linePointer))->getFont()
                    ->setBold('true');        
            $objWorkSheet->getStyle('B'.($linePointer).':B'.$linePointer)->getFill()
                ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
                ->getStartColor()->setARGB('FFDDEEDD');
            
            if ($this->steamModel->$turbineOn == 1){
                $rows = 3;
                $linePointer++;        
                $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Isentropic Efficiency'));
                $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->$turbineIsoEff/100);
                $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode('#,##0.0 %');
                $linePointer++;        
                $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Generation Efficiency'));
                $objWorkSheet->setCellValue('C'.$linePointer,$this->steamModel->$turbineGenEff/100);
                $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode('#,##0.0 %');
                if ($turbine=='Cond'){                    
                    $rows ++;
                    $linePointer++;
                    $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Condenser Pressure'));
                    $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawVacuum($this->steamModel->turbineCondOutletPressure) );
                    $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode($this->mS->excelFormat('vacuum'));
                    $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('vacuum'));
                }
                $linePointer++;        
                $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Operation Type'));
                $objWorkSheet->setCellValue('C'.$linePointer,$this->translator->_($turbineMethods[$this->steamModel->$turbineMethod]));
                switch($this->steamModel->$turbineMethod){
                        case 'fixedFlow':
                            $rows ++;
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Fixed Flow'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawMassflow($this->steamModel->$turbineFixedFlow) );
                            $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));
                            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('massflow'));
                            break;
                        case 'flowRange':
                            $rows += 2;
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Minimum Flow'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawMassflow($this->steamModel->$turbineMinFlow) );
                            $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));
                            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('massflow'));

                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Maximum Flow'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawMassflow($this->steamModel->$turbineMaxFlow) );
                            $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));
                            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('massflow'));             
                            break;

                        case 'fixedPower':
                            $rows ++;
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Fixed Power'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawPower($this->steamModel->$turbineFixedPower) );
                            $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode($this->mS->excelFormat('power'));
                            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('power'));                           
                            break;
                        case 'powerRange':
                            $rows += 2;
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Minimum Power'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawPower($this->steamModel->$turbineMinPower) );
                            $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode($this->mS->excelFormat('power'));
                            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('power'));

                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Maximum Power'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawPower($this->steamModel->$turbineMaxPower) );
                            $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode($this->mS->excelFormat('power'));
                            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('power'));
                            break;
                    case 'balanceHeader':                                                        
                        break;
                    
                }         
                $objWorkSheet->getStyle('D'.($linePointer-$rows).':D'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('temperature'));

                $objWorkSheet->getStyle('B'.($linePointer-$rows))->getFont()
                        ->setBold('true');        
                $objWorkSheet->getStyle('B'.($linePointer-$rows).':B'.$linePointer)->getFill()
                    ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
                    ->getStartColor()->setARGB('FFDDEEDD');
                $objWorkSheet->getStyle('D'.($linePointer-$rows).':D'.$linePointer)->getFont()
                        ->setItalic('true')
                    ->getColor()->setARGB('FF888888');   
            }            
            $linePointer++;   
        }
                  
    }
    
    /**
     * Add Adjusted Model Spreadsheet
     */        
    private function addAdjustedModel(){        
        $objWorkSheet = $this->objPHPExcel->createSheet();
        $objWorkSheet->setTitle($this->translator->_('Adjusted Model'));      
        $objWorkSheet->setCellValue('B1',$this->translator->_('Adjusted Model')); 
                
        $objWorkSheet->getColumnDimension('A')->setWidth(2);
        $objWorkSheet->getColumnDimension('B')->setWidth(35); 
          
        $objWorkSheet->getStyle('B1:B1')->getFont()
                ->setBold('true')
                ->setSize(15)
                ->getColor()->setARGB('FF1F497D');
            
        $linePointer = 1;          
        foreach(Steam_Model_Projects::listed() as $catKey => $projects){
            
            if (isset($this->adjustedModel->$catKey) and $this->adjustedModel->$catKey  ){
                $linePointer++;
                $linePointer++;
                $objWorkSheet->mergeCells('B'.$linePointer.':D'.$linePointer);
                $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_($projects[0])); 
                $objWorkSheet->getStyle('B'.$linePointer.':D'.$linePointer)->getFont()
                    ->setBold('true')
                    ->setSize(12)
                    ->getColor()->setARGB('FF1F497D');
            }
            foreach($projects[1] as $projectKey => $project){
                if (isset($this->adjustedModel->$projectKey) and $this->adjustedModel->$projectKey ){
                    $linePointer++;
                    $objWorkSheet->mergeCells('B'.$linePointer.':C'.$linePointer);
                    $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_($project)); 
                    $objWorkSheet->getStyle('B'.$linePointer)->getFont()
                            ->setBold('true');        
                    $objWorkSheet->getStyle('B'.$linePointer.':B'.$linePointer)->getFill()
                        ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
                        ->getStartColor()->setARGB('FFDDEEDD');
                $rows = 0;
                switch ($projectKey) {
                    case 'Proj_steamDemand':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New HP Steam Usage'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawMassflow($this->adjustedModel->hpSteamUsage) ); 
                        $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('massflow'));
                        $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));
                        
                        if ( $this->steamModel->headerCount==3 ){
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New MP Steam Usage'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawMassflow($this->adjustedModel->mpSteamUsage) ); 
                            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('massflow'));
                            $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));
                            $rows++;
                        }
                        if ( $this->steamModel->headerCount>1 ){
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New LP Steam Usage'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawMassflow($this->adjustedModel->lpSteamUsage) ); 
                            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('massflow'));
                            $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));
                            $rows++;
                        }                
                        break;
                    case 'Proj_energyDemand':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New HP Energy Usage'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawEnergyflow($this->adjustedModel->energyUsageHP) ); 
                        $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('energyflow'));
                        $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('energyflow'));
                        
                        if ( $this->steamModel->headerCount==3 ){
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New MP Energy Usage'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawEnergyflow($this->adjustedModel->energyUsageMP) ); 
                            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('energyflow'));
                            $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('energyflow'));
                            $rows++;
                        }
                        if ( $this->steamModel->headerCount>1 ){
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New LP Energy Usage'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawEnergyflow($this->adjustedModel->energyUsageLP) ); 
                            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('energyflow'));
                            $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('energyflow'));
                            $rows++;
                        }                
                        break;
                    case 'Proj_boilerEff':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('NEW Combustion Efficiency'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->boilerEff/100 ); 
                        $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');                      
                        break;
                    case 'Proj_fuelType':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('NEW Fuel Type'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->translator->_(Steam_Fuel::fuelNames($this->adjustedModel->fuelType) ) );
                        break; 
                    case 'Proj_blowdownRate':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('NEW Blowdown Rate'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->blowdownRate/100 ); 
                        $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');                      
                        break;
                    case 'Proj_blowdownFlashLP':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Flash Blowdown'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->blowdownFlashLP );                    
                        break;                    
                    case 'Proj_steamGen':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('NEW Steam Temperature'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawTemperature($this->adjustedModel->boilerTemp) );     
                        $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode($this->mS->excelFormat('temperature'));
                        $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('temperature'));              
                        break;
                    case 'Proj_daVentRate':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('NEW DA Vent Rate'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->daVentRate/100 ); 
                        $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');   
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('NEW DA Pressure'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->daPressure/100 ); 
                        $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('pressure'));
                        $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('pressure'));
                        $rows++;
                        break;
                    
                    case 'Proj_condTurbine':
                    case 'Proj_hpLpTurbine':
                    case 'Proj_hpMpTurbine':
                    case 'Proj_mpLpTurbine':
                        if ($projectKey == 'Proj_condTurbine') $turbineType = 'Cond';
                        if ($projectKey == 'Proj_hpLpTurbine') $turbineType = 'HpLp';
                        if ($projectKey == 'Proj_hpMpTurbine') $turbineType = 'HpMp';
                        if ($projectKey == 'Proj_mpLpTurbine') $turbineType = 'MpLp';
                        $turbineStatus = array(0 => 'Off', 1 => 'On');
                        $turbineMethods = array(
                            'balanceHeader' => 'Balance Header',
                            'fixedFlow' => 'Steam Flow',
                            'flowRange' => 'Flow Range',
                            'fixedPower' => 'Power Generation',
                            'powerRange' => 'Power Range',
                            );
                        $turbineOn = 'turbine'.$turbineType.'On';
                        $turbineIsoEff = 'turbine'.$turbineType.'IsoEff';
                        $turbineGenEff = 'turbine'.$turbineType.'GenEff';
                        $turbineMethod = 'turbine'.$turbineType.'Method';
                        $turbineFixedFlow = 'turbine'.$turbineType.'FixedFlow';
                        $turbineMinFlow = 'turbine'.$turbineType.'MinFlow';
                        $turbineMaxFlow = 'turbine'.$turbineType.'MaxFlow';

                        $turbineFixedPower = 'turbine'.$turbineType.'FixedPower';
                        $turbineMinPower = 'turbine'.$turbineType.'MinPower';
                        $turbineMaxPower = 'turbine'.$turbineType.'MaxPower';
                        
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Turbine Status'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$turbineStatus[$this->adjustedModel->$turbineOn] );  
                        if ($this->adjustedModel->$turbineOn==1){
                            $linePointer++; $rows++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Isentropic Efficiency'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->$turbineIsoEff/100 ); 
                            $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');
                            $linePointer++; $rows++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Generation Efficiency'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->$turbineGenEff/100 ); 
                            $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');
                            if($turbineType=='Cond'){
                                    $linePointer++; $rows++;
                                    $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Condenser Pressure'));
                                    $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawVacuum($this->adjustedModel->turbineCondOutletPressure) ); 
                                    $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('vacuum'));
                                    $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('vacuum'));                                
                            }
                            $linePointer++; $rows++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Operation'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->translator->_($turbineMethods[$this->adjustedModel->$turbineMethod]) );  
                            switch($this->adjustedModel->$turbineMethod){
                                case 'fixedFlow':
                                    $linePointer++; $rows++;
                                    $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Fixed Mass Flow'));
                                    $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawMassflow($this->adjustedModel->$turbineFixedFlow) ); 
                                    $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('massflow'));
                                    $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));
                                    break;
                                case 'flowRange':
                                    $linePointer++; $rows++;
                                    $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Minimum Mass Flow'));
                                    $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawMassflow($this->adjustedModel->$turbineMinFlow) ); 
                                    $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('massflow'));
                                    $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));
                                    $linePointer++; $rows++;
                                    $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Maximum Mass Flow'));
                                    $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawMassflow($this->adjustedModel->$turbineMaxFlow) ); 
                                    $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('massflow'));
                                    $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));
                                    break;
                                case 'fixedPower':
                                    $linePointer++; $rows++;
                                    $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Fixed Power'));
                                    $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawPower($this->adjustedModel->$turbineFixedPower) ); 
                                    $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('power'));
                                    $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('power'));
                                    break;
                                case 'powerRange':
                                    $linePointer++; $rows++;
                                    $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Minimum Power'));
                                    $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawPower($this->adjustedModel->$turbineMinPower) ); 
                                    $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('power'));
                                    $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('power'));
                                    $linePointer++; $rows++;
                                    $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Maximum Power'));
                                    $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawPower($this->adjustedModel->$turbineMaxPower) ); 
                                    $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('power'));
                                    $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('power'));
                                    break;
                                case 'balanceHeader':
                                    break;
                            }
                        }
                        
                        break;
                                        
                    case 'Proj_condRecovery':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New HP Condenstate Return'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->hpCondReturnRate/100 ); 
                        $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');   
                        if ( $this->steamModel->headerCount==3 ){
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New MP Condenstate Return'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->mpCondReturnRate/100 ); 
                            $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');  
                            $rows++;
                        }
                        if ( $this->steamModel->headerCount>1 ){
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New LP Condenstate Return'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->lpCondReturnRate/100 ); 
                            $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');  
                            $rows++;
                        }      
                        break;
                    case 'Proj_condFlashMP':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Flash Condensate into MP'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->hpCondFlash );                    
                        break;
                    case 'Proj_condFlashLP':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('Flash Condensate into LP'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->mpCondFlash );                    
                        break;
                    case 'Proj_heatLossPercent':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New HP Heat Loss %'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->hpHeatLossPercent/100 ); 
                        $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');   
                        if ( $this->steamModel->headerCount==3 ){
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New MP Heat Loss %'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->mpHeatLossPercent/100 ); 
                            $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');  
                            $rows++;
                        }
                        if ( $this->steamModel->headerCount>1 ){
                            $linePointer++;
                            $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('New LP Heat Loss %'));
                            $objWorkSheet->setCellValue('C'.$linePointer,$this->adjustedModel->lpHeatLossPercent/100 ); 
                            $objWorkSheet->getStyle('C'.$linePointer)->getNumberFormat()->setFormatCode('#,##0.0 %');  
                            $rows++;
                        }      
                        break;                                         
                    case 'Proj_condReturnTemp':
                        $linePointer++;
                        $objWorkSheet->setCellValue('B'.$linePointer,'-'.$this->translator->_('NEW Condensate Return Temperature'));
                        $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->rawTemperature($this->adjustedModel->condReturnTemp) );     
                        $objWorkSheet->getStyle('C'.($linePointer))->getNumberFormat()->setFormatCode($this->mS->excelFormat('temperature'));
                        $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('temperature'));              
                        break;
                    default:
                        break;
                }
                    
                $objWorkSheet->getStyle( 'B'.($linePointer-$rows).':B'.$linePointer )->getFill()
                    ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
                    ->getStartColor()->setARGB('FFEEEEEE');
                $objWorkSheet->getStyle( 'D'.($linePointer-$rows).':D'.$linePointer )->getFont()
                    ->setItalic('true')
                    ->getColor()->setARGB('FF888888');   
                }
            }
            
        }
        $objWorkSheet->getStyle('A100:A100')->getFont();
    }
    
    /**
     * Add Model Comparison Spreadsheet
     */
    private function addComparison(){
        $SMC = $this->sMc;
        $objWorkSheet = $this->objPHPExcel->createSheet();
        $objWorkSheet->setTitle($this->translator->_('Comparison'));       
        
        $objWorkSheet->getColumnDimension('A')->setWidth(2);
        $objWorkSheet->getColumnDimension('B')->setWidth(21);
        $objWorkSheet->getColumnDimension('C')->setWidth(12);
        $objWorkSheet->getColumnDimension('D')->setWidth(15);
        $objWorkSheet->getColumnDimension('E')->setWidth(11);
        $objWorkSheet->getColumnDimension('F')->setWidth(10);
        $objWorkSheet->getColumnDimension('G')->setWidth(10);
        
        $objWorkSheet->setCellValue('B1',$this->translator->_('Base Model vs. Adjusted Model'));   
        $objWorkSheet->getStyle('B1:B1')->getFont()
                ->setBold('true')
                ->setSize(15)
                ->getColor()->setARGB('FF1F497D');
                        
        $objWorkSheet->mergeCells('B1:F1');
        $objWorkSheet->mergeCells('E2:F2');    
            
        $objWorkSheet->setCellValue('B2',$this->translator->_('Cost Summary'));
        $objWorkSheet->setCellValue('C2',$this->translator->_('Base Model'));
        $objWorkSheet->setCellValue('D2',$this->translator->_('Adjusted Model'));
        $objWorkSheet->setCellValue('E2',$this->translator->_('Reduction'));
                    
        $objWorkSheet->setCellValue('C3',$this->currencySymbol."'000s/yr");
        $objWorkSheet->setCellValue('D3',$this->currencySymbol."'000s/yr");
        $objWorkSheet->setCellValue('E3',$this->currencySymbol."'000s/yr");
        
        $tmpBase = $SMC->baseModel->sitePowerCost*$SMC->baseModel->newSitePowerImport*$SMC->baseModel->operatingHours/1000;
        $tmpProject = $SMC->adjustedModels->sitePowerCost*$SMC->adjustedModels->newSitePowerImport*$SMC->adjustedModels->operatingHours/1000;
        
        $linePointer = 4;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Power Cost'));
        $objWorkSheet->setCellValue('C'.$linePointer,$tmpBase);
        $objWorkSheet->setCellValue('D'.$linePointer,$tmpProject);
        $tmp = $this->diffIt($tmpBase, $tmpProject);
        $objWorkSheet->setCellValue('E'.$linePointer,$tmp[0]);
        $objWorkSheet->setCellValue('F'.$linePointer,$tmp[1]);
        if ($tmp[0]>0){
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FFFF0000');
        }else{
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FF00AA00');
        } 
        
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Fuel Cost'));
        $objWorkSheet->setCellValue('C'.$linePointer,$SMC->baseModel->boilerTotalFuelCost/1000);
        $objWorkSheet->setCellValue('D'.$linePointer,$SMC->adjustedModels->boilerTotalFuelCost/1000);
        $tmp = $this->diffIt($SMC->baseModel->boilerTotalFuelCost/1000, $SMC->adjustedModels->boilerTotalFuelCost/1000);
        $objWorkSheet->setCellValue('E'.$linePointer,$tmp[0]);
        $objWorkSheet->setCellValue('F'.$linePointer,$tmp[1]);
        if ($tmp[0]>0){
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FFFF0000');
        }else{
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FF00AA00');
        } 
        
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Make-Up Water Cost'));
        $objWorkSheet->setCellValue('C'.$linePointer,$SMC->baseModel->makeupWaterTotalCost/1000);
        $objWorkSheet->setCellValue('D'.$linePointer,$SMC->adjustedModels->makeupWaterTotalCost/1000);
        $tmp = $this->diffIt($SMC->baseModel->makeupWaterTotalCost/1000, $SMC->adjustedModels->makeupWaterTotalCost/1000);
        $objWorkSheet->setCellValue('E'.$linePointer,$tmp[0]);
        $objWorkSheet->setCellValue('F'.$linePointer,$tmp[1]);
        if ($tmp[0]>0){
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FFFF0000');
        }else{
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FF00AA00');
        } 
        
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Total Cost'));
        $objWorkSheet->setCellValue('C'.$linePointer,$SMC->baseModel->totalOperatingCosts/1000);
        $objWorkSheet->setCellValue('D'.$linePointer,$SMC->adjustedModels->totalOperatingCosts/1000);
        $tmp = $this->diffIt($SMC->baseModel->totalOperatingCosts/1000, $SMC->adjustedModels->totalOperatingCosts/1000);
        $objWorkSheet->setCellValue('E'.$linePointer,$tmp[0]);
        $objWorkSheet->setCellValue('F'.$linePointer,$tmp[1]);
        if ($tmp[0]>0){
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FFFF0000');
        }else{
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FF00AA00');
        } 
      
        $objWorkSheet->getStyle('C4:E7')->getNumberFormat()->setFormatCode($this->currencySymbol.' #,##0');
        $objWorkSheet->getStyle('F4:F7')->getNumberFormat()->setFormatCode('#,##0.0 %');
         $objWorkSheet->getStyle('B2:E2')->getFont()
                ->setBold('true');        
        $objWorkSheet->getStyle('B2:E2')->getFill()
            ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
            ->getStartColor()->setARGB('FFDDEEDD'); 
        
        $objWorkSheet->getStyle('C3:E3')->getFont()
                ->setItalic('true')
            ->getColor()->setARGB('FF888888');
        

        $linePointer=9;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Utility Balance'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->translator->_('Base Model'));
        $objWorkSheet->setCellValue('D'.$linePointer,$this->translator->_('Adjusted Model'));
        $objWorkSheet->setCellValue('E'.$linePointer,$this->translator->_('Reduction'));
        $objWorkSheet->setCellValue('G'.$linePointer,$this->translator->_('Units'));

        
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Power Generation'));
        $value1 = $this->mS->localize($SMC->baseModel->powerGenerated, 'power');
        $value2 = $this->mS->localize($SMC->adjustedModels->powerGenerated, 'power');
        $objWorkSheet->setCellValue('C'.$linePointer,$value1);
        $objWorkSheet->setCellValue('D'.$linePointer,$value2);      
        $objWorkSheet->setCellValue('G'.$linePointer,$this->mS->excelUnits('power'));
        
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Power Import'));
        $value1 = $this->mS->localize($SMC->baseModel->newSitePowerImport, 'power');
        $value2 = $this->mS->localize($SMC->adjustedModels->newSitePowerImport, 'power');
        $objWorkSheet->setCellValue('C'.$linePointer,$value1);
        $objWorkSheet->setCellValue('D'.$linePointer,$value2);
        $tmp = $this->diffIt($value1,$value2);
        $objWorkSheet->setCellValue('E'.$linePointer,$tmp[0]);
        $objWorkSheet->setCellValue('F'.$linePointer,$tmp[1]);
        if ($tmp[0]>0){
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FFFF0000');
        }else{
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FF00AA00');
        } 
        $objWorkSheet->setCellValue('G'.$linePointer,$this->mS->excelUnits('power'));
        
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Total Site Demand'));
        $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->localize($SMC->baseModel->newSitePowerImport+$SMC->baseModel->powerGenerated,'power'));
        $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->localize($SMC->adjustedModels->newSitePowerImport+$SMC->adjustedModels->powerGenerated,'power'));
        $objWorkSheet->setCellValue('G'.$linePointer,$this->mS->excelUnits('power'));
        
        $linePointer++;
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Boiler Fuel'));
        $value1 = $this->mS->localize($SMC->baseModel->boiler->fuelEnergy, 'energyflow');
        $value2 = $this->mS->localize($SMC->adjustedModels->boiler->fuelEnergy, 'energyflow');
        $objWorkSheet->setCellValue('C'.$linePointer,$value1);
        $objWorkSheet->setCellValue('D'.$linePointer,$value2);
        $tmp = $this->diffIt($value1,$value2);
        $objWorkSheet->setCellValue('E'.$linePointer,$tmp[0]);
        $objWorkSheet->setCellValue('F'.$linePointer,$tmp[1]);
        if ($tmp[0]>0){
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FFFF0000');
        }else{
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FF00AA00');
        } 
        $objWorkSheet->setCellValue('G'.$linePointer,$this->mS->excelUnits('energyflow'));
        
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Fuel Type'));        
        $objWorkSheet->setCellValue('C'.$linePointer,$this->translator->_(Steam_Fuel::fuelNames($SMC->baseModel->fuelType) ));    
        $objWorkSheet->setCellValue('D'.$linePointer,$this->translator->_(Steam_Fuel::fuelNames($SMC->adjustedModels->fuelType) ));  
        
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('CO2 Emissions'));
        $value1 = $SMC->baseModel->co2Emissions;
        $value2 = $SMC->adjustedModels->co2Emissions;
        $objWorkSheet->setCellValue('C'.$linePointer,$value1);
        $objWorkSheet->setCellValue('D'.$linePointer,$value2);
        $tmp = $this->diffIt($value1,$value2);
        $objWorkSheet->setCellValue('E'.$linePointer,$tmp[0]);
        $objWorkSheet->setCellValue('F'.$linePointer,$tmp[1]);
        if ($tmp[0]>0){
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FFFF0000');
        }else{
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FF00AA00');
        } 
        $objWorkSheet->setCellValue('G'.$linePointer,'tons');
        
        
        
        $linePointer++;
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Boiler Steam'));
        $value1 = $this->mS->localize($SMC->baseModel->boiler->outletSteam->massFlow, 'massflow');
        $value2 = $this->mS->localize($SMC->adjustedModels->boiler->outletSteam->massFlow, 'massflow');
        $objWorkSheet->setCellValue('C'.$linePointer,$value1);
        $objWorkSheet->setCellValue('D'.$linePointer,$value2);
        $tmp = $this->diffIt($value1,$value2);
        $objWorkSheet->setCellValue('E'.$linePointer,$tmp[0]);
        $objWorkSheet->setCellValue('F'.$linePointer,$tmp[1]);
        if ($tmp[0]>0){
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FFFF0000');
        }else{
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FF00AA00');
        } 
        $objWorkSheet->setCellValue('G'.$linePointer,$this->mS->excelUnits('massflow'));
        
        $linePointer++;
        $linePointer++;
        $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('Make Up Water'));
        $value1 = $this->mS->localize($SMC->baseModel->makeupWater->massFlow, 'volume');
        $value2 = $this->mS->localize($SMC->adjustedModels->makeupWater->massFlow, 'volume');
        $objWorkSheet->setCellValue('C'.$linePointer,$value1);
        $objWorkSheet->setCellValue('D'.$linePointer,$value2);
        $tmp = $this->diffIt($value1,$value2);
        $objWorkSheet->setCellValue('E'.$linePointer,$tmp[0]);
        $objWorkSheet->setCellValue('F'.$linePointer,$tmp[1]);
        if ($tmp[0]>0){
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FFFF0000');
        }else{
            $objWorkSheet->getStyle('E'.$linePointer.':F'.$linePointer)->getFont()
                    ->getColor()->setARGB('FF00AA00');
        } 
        $objWorkSheet->setCellValue('G'.$linePointer,$this->mS->excelUnits('volume'));
                
        $objWorkSheet->getStyle('B8:G8')->getFont()
                ->setBold('true');        
        $objWorkSheet->getStyle('B8:G8')->getFill()
            ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)                
            ->getStartColor()->setARGB('FFDDEEDD');
        
        $objWorkSheet->getStyle('F10:F20')->getNumberFormat()->setFormatCode('#,##0.0 %');
        $objWorkSheet->getStyle('C10:E12')->getNumberFormat()->setFormatCode('#,##0');
        $objWorkSheet->getStyle('C14:E20')->getNumberFormat()->setFormatCode('#,##0.00');
        $objWorkSheet->getStyle('G10:G20')->getFont()
                ->setItalic('true')
            ->getColor()->setARGB('FF888888');
                        
        $objWorkSheet->getStyle('A100:A100')->getFont();  
    }
    
    /**
     * Add Steam Mass and Energy Balance Spreadsheet
     */
    private function addSteamBalance(){        
        $steamBalance = new Steam_Model_Balance($this->steamModel);
        $objWorkSheet = $this->objPHPExcel->createSheet();
        $objWorkSheet->setTitle($this->translator->_('Steam Balance'));
        
        $linePointer = 2;            
        foreach($steamBalance->components as $component => $title){        
            $objWorkSheet->getStyle('C'.$linePointer)->getFont()
                ->setBold('true')
                ->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKBLUE);
            $objWorkSheet->getStyle('C'.$linePointer.':E'.$linePointer)->getFill()
                ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)
                ->getStartColor()->setARGB('FFDDDDFF');

            $objWorkSheet->mergeCells('C1:E1');
            $objWorkSheet->setCellValue('C'.$linePointer,$this->translator->_('Base Model'));

            if ($this->adjustedModel){
                $steamBalanceAM = new Steam_Model_Balance($this->adjustedModel);
                $objWorkSheet->getStyle('G'.$linePointer)->getFont()
                        ->setBold('true')
                        ->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKBLUE);
                $objWorkSheet->getStyle('G'.$linePointer.':I'.$linePointer)->getFill()
                ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)
                ->getStartColor()->setARGB('FFDDDDFF');

                $objWorkSheet->mergeCells('G1:I1');
                $objWorkSheet->setCellValue('G'.$linePointer,$this->translator->_('Adjusted Model')); 
            }
            
            $linePointer++;        
            $objWorkSheet->getStyle('B'.$linePointer)->getFont()
                ->setBold('true')
                ->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKBLUE);
            $objWorkSheet->getStyle('B'.$linePointer.':E'.$linePointer)->getFill()
                ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)
                ->getStartColor()->setARGB('FFDDDDFF');
        
            $objWorkSheet->getStyle('C'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKBLUE);
            $objWorkSheet->getStyle('D'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKBLUE);
            $objWorkSheet->getStyle('E'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKBLUE);

            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_($title));
            $objWorkSheet->setCellValue('C'.$linePointer,$this->mS->excelUnits('massflow'));
            $objWorkSheet->setCellValue('D'.$linePointer,$this->mS->excelUnits('energyflow'));
            $objWorkSheet->setCellValue('E'.$linePointer,$this->mS->excelUnits('specificEnthalpy'));

            if ($this->adjustedModel){
                $objWorkSheet->setCellValue('G'.$linePointer,$this->mS->excelUnits('massflow'));
                $objWorkSheet->setCellValue('H'.$linePointer,$this->mS->excelUnits('energyflow'));
                $objWorkSheet->setCellValue('I'.$linePointer,$this->mS->excelUnits('specificEnthalpy'));
            }
        
            $boxTop = $linePointer;
            $linePointer++;
            foreach($steamBalance->pieces[$component] as $id => $label){ 
                $color = 'green';
                $objWorkSheet->getStyle('B'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKBLUE);
                if ($steamBalance->sB[$component]['eF'][$id]<0) {
                    $objWorkSheet->getStyle('C'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_RED);
                    $objWorkSheet->getStyle('D'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_RED);
                }else{            
                    $objWorkSheet->getStyle('C'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKGREEN);
                    $objWorkSheet->getStyle('D'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKGREEN);
                }
                $objWorkSheet
                    ->setCellValue('B'.$linePointer,$this->translator->_($label))
                    ->setCellValue('C'.$linePointer,$this->mS->localize($steamBalance->sB[$component]['mF'][$id],'massflow'))
                    ->setCellValue('D'.$linePointer,$this->mS->localize($steamBalance->sB[$component]['eF'][$id],'energyflow') );
                $objWorkSheet->getStyleByColumnAndRow(2, $linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));                        
                $objWorkSheet->getStyleByColumnAndRow(3, $linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('energyflow'));
                
                if ($steamBalance->sB[$component]['mF'][$id]<>0 and $id<>'hpProcessLoss' and $id<>'mpProcessLoss' and $id<>'lpProcessLoss' ) {
                    $objWorkSheet->setCellValue('E'.$linePointer,$this->mS->localize($steamBalance->sB[$component]['eF'][$id]/$steamBalance->sB[$component]['mF'][$id]*1000,'specificEnthalpy'));
                    $objWorkSheet->getStyleByColumnAndRow(4, $linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('specificEnthalpy'));                    
                }
                                
                if ($this->adjustedModel){
                    $color = 'green';
                    $objWorkSheet->getStyle('G'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKBLUE);
                    if ($steamBalanceAM->sB[$component]['eF'][$id]<0) {
                        $objWorkSheet->getStyle('G'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_RED);
                        $objWorkSheet->getStyle('H'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_RED);
                    }else{            
                        $objWorkSheet->getStyle('G'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKGREEN);
                        $objWorkSheet->getStyle('H'.$linePointer)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_DARKGREEN);
                    }
                    $objWorkSheet
                        ->setCellValue('G'.$linePointer,$this->mS->localize($steamBalanceAM->sB[$component]['mF'][$id],'massflow'))
                        ->setCellValue('H'.$linePointer,$this->mS->localize($steamBalanceAM->sB[$component]['eF'][$id],'energyflow') );
                    $objWorkSheet->getStyleByColumnAndRow(6, $linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));                        
                    $objWorkSheet->getStyleByColumnAndRow(7, $linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('energyflow'));
                    if ($steamBalanceAM->sB[$component]['mF'][$id]<>0 and $id<>'hpProcessLoss' and $id<>'mpProcessLoss' and $id<>'lpProcessLoss' ) {
                        $objWorkSheet->setCellValue('I'.$linePointer,$this->mS->localize($steamBalanceAM->sB[$component]['eF'][$id]/$steamBalanceAM->sB[$component]['mF'][$id]*1000,'specificEnthalpy'));                                        
                        $objWorkSheet->getStyleByColumnAndRow(8, $linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('specificEnthalpy'));
                    }
                }                
                $linePointer++;
            }
            
            $objWorkSheet->getStyle('B'.$linePointer.':H'.$linePointer)->getFont()->setBold('true');            
            $objWorkSheet->getStyle('B'.$linePointer)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $objWorkSheet->setCellValue('B'.$linePointer,$this->translator->_('TOTAL').":")
                ->setCellValue('C'.$linePointer,$this->mS->localize(array_sum($steamBalance->sB[$component]['mF']),'massflow'))
                ->setCellValue('D'.$linePointer,$this->mS->localize(array_sum($steamBalance->sB[$component]['eF']),'energyflow') );
            $objWorkSheet->getStyleByColumnAndRow(2, $linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));                        
            $objWorkSheet->getStyleByColumnAndRow(3, $linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('energyflow'));                
                
            if ($this->adjustedModel){                    
                $objWorkSheet->setCellValue('G'.$linePointer,$this->mS->localize(array_sum($steamBalanceAM->sB[$component]['mF']),'massflow'))
                    ->setCellValue('H'.$linePointer,$this->mS->localize(array_sum($steamBalanceAM->sB[$component]['eF']),'energyflow') );
                $objWorkSheet->getStyleByColumnAndRow(6, $linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('massflow'));                        
                $objWorkSheet->getStyleByColumnAndRow(7, $linePointer)->getNumberFormat()->setFormatCode($this->mS->excelFormat('energyflow'));
            }

            $styleArray = array(
                'borders' => array(
                    'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                    )
                )
            );
            $boxBottom = $linePointer-1;
            $objWorkSheet->getStyle('B'.$boxTop.':E'.$boxBottom)->applyFromArray($styleArray);
            if ($this->adjustedModel) $objWorkSheet->getStyle('G'.$boxTop.':I'.$boxBottom)->applyFromArray($styleArray);                                        
            $linePointer++;
            $linePointer++;
        }

        $objWorkSheet->getColumnDimension('A')->setWidth(5);
        $objWorkSheet->getColumnDimension('B')->setWidth(26);
        $objWorkSheet->getColumnDimension('C')->setWidth(10);
        $objWorkSheet->getColumnDimension('D')->setWidth(10);
    }
    
    /**
     * Add Upload Data Spreadsheet
     */
    private function addUploadPage(){        
        $objWorkSheet = $this->objPHPExcel->createSheet();
        $objWorkSheet->setTitle($this->translator->_('Upload Data'));
        $objWorkSheet->setCellValueExplicitByColumnAndRow(0, 1, $this->translator->_('Copy this ENTIRE spreadsheet and paste it into the steam tool reload/upload field to reload this model.'));
        
        $objWorkSheet->getStyle('A1:A1')->getFont()
                ->setBold(true)
                ->getColor()->setARGB('FF0000FF');
        
        $this->preferences = new Zend_Session_Namespace('preferences');
        
        $linePointer = 2;
        $objWorkSheet->setCellValueExplicitByColumnAndRow(0, $linePointer++, '-------');
        $objWorkSheet->setCellValueExplicitByColumnAndRow(0, $linePointer, 'systemSelected');
        $objWorkSheet->setCellValueExplicitByColumnAndRow(1, $linePointer++, $this->preferences->systemSelected);        
        foreach($this->mS->selected as $key => $value){
            $objWorkSheet->setCellValueExplicitByColumnAndRow(0, $linePointer, $key);
            $objWorkSheet->setCellValueExplicitByColumnAndRow(1, $linePointer, $value);
            $linePointer++;
        }

        $objWorkSheet->setCellValueExplicitByColumnAndRow(0, $linePointer++, '-------');            
        foreach($this->steamDTO->unload() as $key => $values){
            $objWorkSheet->setCellValueExplicitByColumnAndRow(0, $linePointer, $key);
            $objWorkSheet->setCellValueExplicitByColumnAndRow(1, $linePointer, $values);                            
            $linePointer++;
        }
        
        if ($this->sMc->adjustedLoaded){
            $objWorkSheet->setCellValueExplicitByColumnAndRow(0, $linePointer++, '-------');
            foreach($this->sMc->adjustedDTO->unload() as $key => $values){
                $objWorkSheet->setCellValueExplicitByColumnAndRow(0, $linePointer, $key);
                $objWorkSheet->setCellValueExplicitByColumnAndRow(1, $linePointer, $values);         
                $linePointer++;
            }
        }                                
    }
    
    /**
     * Calculates the numeric and percent difference between two values
     */    
    private function diffIt($valueA, $valueB){
        $diff = $valueA - $valueB;
        $diffPercent = $diff / $valueA;
        return array(-$diff, -$diffPercent);
    }
}